import schedule
import time
import subprocess
import configparser
import os
from datetime import datetime, timedelta
import logging

def setup_logging():
    """配置日志"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler('scheduler.log', encoding='utf-8'),
            logging.StreamHandler()
        ]
    )

def run_validation():
    """执行验证程序"""
    try:
        logging.info("开始执行验证程序")
        
        # 获取当前脚本所在目录
        current_dir = os.path.dirname(__file__)
        
        # 读取schedule配置文件
        schedule_config = configparser.ConfigParser()
        schedule_config_path = os.path.join(current_dir, 'schedule_config.ini')
        schedule_config.read(schedule_config_path, encoding='utf-8')
        
        # 创建临时的code4配置文件
        temp_config_path = os.path.join(current_dir, 'temp_config.ini')
        code4_config = configparser.ConfigParser()
        
        # 复制除[Schedule]之外的所有配置到新的配置文件
        for section in schedule_config.sections():
            if section != 'Schedule':
                code4_config[section] = {}
                for key, value in schedule_config[section].items():
                    code4_config[section][key] = value
        
        # 保存临时配置文件
        with open(temp_config_path, 'w', encoding='utf-8') as f:
            code4_config.write(f)
        
        # 执行code4.py，使用临时配置文件
        script_path = os.path.join(current_dir, 'setup.py')
        env = os.environ.copy()
        env['CONFIG_PATH'] = temp_config_path  # 通过环境变量传递配置文件路径
        
        result = subprocess.run(
            ['python', script_path], 
            capture_output=True, 
            text=True,
            env=env
        )
        
        # 删除临时配置文件
        if os.path.exists(temp_config_path):
            os.remove(temp_config_path)
        
        if result.returncode == 0:
            logging.info("验证程序执行成功")
            if result.stdout:
                logging.info(f"输出信息：\n{result.stdout}")
        else:
            logging.error(f"验证程序执行失败：\n{result.stderr}")
            
    except Exception as e:
        logging.error(f"执行验证程序时发生错误：{str(e)}")

def load_schedule_config():
    """加载定时配置"""
    try:
        config = configparser.ConfigParser()
        config_path = os.path.join(os.path.dirname(__file__), 'schedule_config.ini')
        
        if not os.path.exists(config_path):
            # 如果配置文件不存在，创建默认配置
            config['Schedule'] = {
                'enabled': 'true',
                'run_time': '00:00',  # 每天运行时间
                'interval_hours': '24'  # 运行间隔（小时）
            }
            
            with open(config_path, 'w', encoding='utf-8') as f:
                config.write(f)
            logging.info("已创建默认配置文件")
        
        config.read(config_path, encoding='utf-8')
        return config
        
    except Exception as e:
        logging.error(f"加载配置文件时发生错误：{str(e)}")
        return None

def setup_schedule(config):
    """设置定时任务"""
    try:
        if not config.getboolean('Schedule', 'enabled'):
            logging.info("定时任务已禁用")
            return False
            
        # 检查是否设置了延迟执行
        if 'delay_minutes' in config['Schedule']:
            delay_minutes = config.getint('Schedule', 'delay_minutes')
            # 计算延迟执行的时间
            next_run = datetime.now() + timedelta(minutes=delay_minutes)
            schedule.every().day.at(next_run.strftime("%H:%M")).do(run_validation)
            logging.info(f"定时任务已设置 - 将在{delay_minutes}分钟后运行（{next_run.strftime('%H:%M')}）")
        else:
            # 使用固定时间运行
            run_time = config.get('Schedule', 'run_time')
            interval_hours = config.getint('Schedule', 'interval_hours')
            
            # 设置每天固定时间运行
            schedule.every().day.at(run_time).do(run_validation)
            
            # 如果间隔小于24小时，添加额外的定时任务
            if interval_hours < 24:
                schedule.every(interval_hours).hours.do(run_validation)
                
            logging.info(f"定时任务已设置 - 运行时间：{run_time}，间隔：{interval_hours}小时")
        
        return True
        
    except Exception as e:
        logging.error(f"设置定时任务时发生错误：{str(e)}")
        return False

def main():
    """主函数"""
    setup_logging()
    logging.info("定时程序启动")
    
    # 加载配置
    config = load_schedule_config()
    if not config:
        logging.error("无法加载配置，程序退出")
        return
    
    # 设置定时任务
    if not setup_schedule(config):
        logging.error("设置定时任务失败，程序退出")
        return
    
    # 运行定时任务
    logging.info("开始运行定时任务")
    while True:
        try:
            schedule.run_pending()
            time.sleep(60)  # 每分钟检查一次
        except KeyboardInterrupt:
            logging.info("程序被手动终止")
            break
        except Exception as e:
            logging.error(f"运行时发生错误：{str(e)}")
            time.sleep(300)  # 发生错误时等待5分钟后继续

if __name__ == '__main__':
    main()